name: Deploy
on:
  push:
    branches:
      - main
jobs:
  deploy:
    runs-on: ubuntu-20.04
    steps:
      - run: sudo curl -L https://github.com/docker/compose/releases/download/1.16.1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
      - run: sudo chmod +x /usr/local/bin/docker-compose

      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: "14"
      - run: npm install -g npm@7
      - run: npm ci

      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          aws-region: ${{secrets.AWS_REGION}}

      - run: npx --workspace=crawler webpack
      - run: docker-compose build
        env:
          AWS_LAMBDA_ENQUEUE_FUNCTION_NAME: ${{secrets.AWS_LAMBDA_ENQUEUE_FUNCTION_NAME}}
          AWS_LAMBDA_GENERATE_SITEMAP_FUNCTION_NAME: ${{secrets.AWS_LAMBDA_GENERATE_SITEMAP_FUNCTION_NAME}}
          AWS_LAMBDA_REPORT_FUNCTION_NAME: ${{secrets.AWS_LAMBDA_REPORT_FUNCTION_NAME}}
        working-directory: packages/crawler

      - id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - run: |
          docker tag "${{secrets.AWS_LAMBDA_ENQUEUE_FUNCTION_NAME}}" "${ECR_REGISTRY}/${{secrets.AWS_LAMBDA_ENQUEUE_FUNCTION_NAME}}"
          docker push "${ECR_REGISTRY}/${{secrets.AWS_LAMBDA_ENQUEUE_FUNCTION_NAME}}"
        env:
          ECR_REGISTRY: ${{steps.login-ecr.outputs.registry}}
      - id: get-lambda-enqueue-function-image-uri
        run: echo "::set-output name=image_uri::$(docker inspect --format='{{index .RepoDigests 0}}' "${{secrets.AWS_LAMBDA_ENQUEUE_FUNCTION_NAME}}")"

      - run: |
          docker tag "${{secrets.AWS_LAMBDA_GENERATE_SITEMAP_FUNCTION_NAME}}" "${ECR_REGISTRY}/${{secrets.AWS_LAMBDA_GENERATE_SITEMAP_FUNCTION_NAME}}"
          docker push "${ECR_REGISTRY}/${{secrets.AWS_LAMBDA_GENERATE_SITEMAP_FUNCTION_NAME}}"
        env:
          ECR_REGISTRY: ${{steps.login-ecr.outputs.registry}}
      - id: get-lambda-generate-sitemap-function-image-uri
        run: echo "::set-output name=image_uri::$(docker inspect --format='{{index .RepoDigests 0}}' "${{secrets.AWS_LAMBDA_GENERATE_SITEMAP_FUNCTION_NAME}}")"

      - run: |
          docker tag "${{secrets.AWS_LAMBDA_REPORT_FUNCTION_NAME}}" "${ECR_REGISTRY}/${{secrets.AWS_LAMBDA_REPORT_FUNCTION_NAME}}"
          docker push "${ECR_REGISTRY}/${{secrets.AWS_LAMBDA_REPORT_FUNCTION_NAME}}"
        env:
          ECR_REGISTRY: ${{steps.login-ecr.outputs.registry}}
      - id: get-lambda-report-function-image-uri
        run: echo "::set-output name=image_uri::$(docker inspect --format='{{index .RepoDigests 0}}' "${{secrets.AWS_LAMBDA_REPORT_FUNCTION_NAME}}")"

      - uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: ${{secrets.AWS_CLOUD_FORMATION_STACK_NAME}}
          template: template.yml
          capabilities: CAPABILITY_IAM
          no-fail-on-empty-changeset: "1"
          parameter-overrides: >-
            DynamoDBRepositoriesTableName=${{secrets.AWS_DYNAMODB_REPOSITORIES_TABLE_NAME}},

            LambdaEnqueueFunctionName=${{secrets.AWS_LAMBDA_ENQUEUE_FUNCTION_NAME}},
            LambdaEnqueueFunctionImageUri=${{steps.get-lambda-enqueue-function-image-uri.outputs.image_uri}},

            LambdaGenerateSitemapFunctionName=${{secrets.AWS_LAMBDA_GENERATE_SITEMAP_FUNCTION_NAME}},
            LambdaGenerateSitemapFunctionImageUri=${{steps.get-lambda-generate-sitemap-function-image-uri.outputs.image_uri}},

            LambdaReportFunctionName=${{secrets.AWS_LAMBDA_REPORT_FUNCTION_NAME}},
            LambdaReportFunctionImageUri=${{steps.get-lambda-report-function-image-uri.outputs.image_uri}},

            S3DefaultBucketName=${{secrets.AWS_S3_DEFAULT_BUCKET_NAME}},
            S3ReportsBucketName=${{secrets.AWS_S3_REPORT_BUCKET_NAME}},

            SQSQueueName=${{secrets.AWS_SQS_QUEUE_NAME}},
            SQSDeadLettersQueueName=${{secrets.AWS_SQS_DEAD_LETTERS_QUEUE_NAME}}

      - run: npm run --workspace=viewer build
        env:
          SENTRY_DSN: ${{secrets.SENTRY_DSN}}
      - uses: jakejarvis/s3-sync-action@master
        env:
          AWS_S3_BUCKET: ${{secrets.AWS_S3_DEFAULT_BUCKET_NAME}}
          AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
          AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          SOURCE_DIR: packages/viewer/dist
        with:
          args: --acl public-read --follow-symlinks
